Objectives with this project:
Show correct procedures for accessing and calling APIs
Utilize AWS services and databases
Build a secure AWS VPC with proper protocols
Utilize Python in Django development and automating scripts
Show HTML/CSS knowledge with visual representation of data.


Mission:

To display options trading volume for the day amongst the most traded options and presented in a visual way.

Branches:

Build historical database and on-going list of top 10 most likely traded option stocks.
  If a new ticker has enough volume to push itself onto the list - there is some unusual activity we can take advantage of.
  This page will be seperate from our homepage.
  
Homepage will show blocks of options trading volume.  If NIO represents 35% of the options trading volume for the day, their 
'block size' will be 35% of the 100% screen size total.
  Building upon this - users should be able to click individual blocks which then will expand to more in-depth option information
  for the day.  For instance: Clicking on the NIO 35% block would show - 20,000 trades on 1/17/20 $2 Calls, 
  10,000 trades on 2/20/20 $2 calls etc.
  
  
  
To-do to build:

Notes: Automation of this process should happen after we can successfully execute the script ourselves. Let's just get the
       initial build down first.

1. Initial API call to scrape our option data
  1.1 Which API will we use? -
  1.2 Would it be easier to use a webscraper? - 
  1.3 Python script to make the call to the API? Unsure if this is how it works.
  
2. Store Initial API call data to be converted
  2.1 This step may be unnecessary 
  2.2 If not, we need to temporarily store our API output and have it ready to be formatted
  2.3 Storage options for temp data? Can we just have the call place the data into the MySQL database?
      Or possibly into an S3 bucket?
      
3. Convert our data to SQL for a MySQL database
  3.1 What format does our data scrape into? CSV, JSON, SQL? Can we control this?
  3.2 Are there Python libraries for this conversion process we can use?
  3.3 May need to build a Python script to convert this data.
  
4. Store our newly converted/created SQL source data
  4.1 Again, where do we store this data TO BE uploaded? Can we place it into a temporary Python variable?
  4.2 S3? Until we can upload it to the MySQL database and then delete it?
  
5. Upload/Transfer our daily SQL source data to create/overwrite a MySQL database
  5.1 With our data scraped and converted, how do we push it to the MySQL database?
  5.2 Do we overwrite our old data? Or do we create another database?
    5.2.1 Cost concerns should be considered over ease of use here
  5.3 Another Python script here to call for the stored data and send it to the MySQL database most likely.
  
Notes: Operations regarding data collection, conversion and storage should be complete at this point.
Notes: The next steps will contain presentation and manipulation of data.

6. Django framework  
  6.1 How do we create a Django server on AWS?
    6.1.1 Is this run on an EC2 instance? S3?
      6.1.1.1 Cost concerns should be considered over ease of use here
      
7. Create a homepage to present data from our created MySQL database.
  - This step initially will be quite heavy.
  7.1 Bootstrap to help with the CSS and HTML?
  7.2 Initial steps here should just include querying the data and presenting
          in non-visual way - worry about presentation later.
  7.3 Query the MySQL database for the data - SQL usage here? Can we use Python to query for data?
    7.3.1 When building this, we need to make sure our queries are loosely made to fit many different parameters
              since our database will be changing daily.
    7.3.2 Are these queries built into Django homepage? Do we use Django to call a python script for us?
  7.4 How do we hold our queries? Is the database queried everytime the page loads? Can we store these queries into variables
          for manipulation? Best case would be for this to be static for the 24 hour period.
  7.5 After we know how to store our queries, how do we manipulate this data?
    7.5.1 Python scripts built into Django to perform these functions?
    7.5.2 Ie. Show the total options traded for the day across all options - We need to add all of the total options 
              traded together.How do we do this from the MySQL database?
  7.6 Make sure queries/manipulated data from the database are then presented on the homepage
 
